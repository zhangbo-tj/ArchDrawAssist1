#include "StdAfx.h"

#include "SliceBBox.h"


//////////////////////////////////////////////////////////////////////////
//@intro	SliceBBox的默认构造器
//////////////////////////////////////////////////////////////////////////
SliceBBox::SliceBBox(){
	minPt[0] = minPt[1] = minPt[2] = 0.0;
	maxPt[0] = maxPt[1] = maxPt[2] = 0.0;
	enrollMode = Cylinder;
}



//////////////////////////////////////////////////////////////////////////
//@intro	SliceBBox构造器
//@param	min,max:bouding box的上下界
//////////////////////////////////////////////////////////////////////////
SliceBBox::SliceBBox(float min[3],float max[3]){
	minPt[0] = min[0];	minPt[1] = min[1];	minPt[2] = min[2];
	maxPt[0] = max[0];  maxPt[1] = max[1];	maxPt[2] = max[2];
	enrollMode = Cylinder;
}



//////////////////////////////////////////////////////////////////////////
//@intro	SliceBBox构造器
//@param	min,max:bounding box的上界和下界
//@param	mode:sliceBox的展开方式
//////////////////////////////////////////////////////////////////////////
SliceBBox::SliceBBox(float min[3],float max[3],EnrollMode mode){
	minPt[0] = min[0];	minPt[1] = min[1];	minPt[2] = min[2];
	maxPt[0] = max[0];  maxPt[1] = max[1];	maxPt[2] = max[2];
	enrollMode = mode;
}


//////////////////////////////////////////////////////////////////////////
//@intro	SliceBBox构造器
//@param	min,max: slice bouding box 的x和z的下界和上界
//@param	lowerVertexOnAxis:slice上的点在对称轴上投影的下界
//@param	higherVertexOnAxis:slice上的点在对称轴上投影的上界
//////////////////////////////////////////////////////////////////////////
SliceBBox::SliceBBox(float min[3],float max[3], Vertex lowerVertexOnAxis,Vertex higherVertexOnAxis){
	minPt[0] = min[0];	minPt[1] = lowerVertexOnAxis.GetY();	 minPt[2] = min[2];
	maxPt[0] = max[0];	maxPt[1] = higherVertexOnAxis.GetY();  	 maxPt[2] = max[2];
	enrollMode = Cylinder;
}


//////////////////////////////////////////////////////////////////////////
//@intro	设置bounding box的下界
//@param	bounding box的下界
//////////////////////////////////////////////////////////////////////////
void SliceBBox::setMin(float min[3]){
	minPt[0] = min[0];
	minPt[1] = min[1];
	minPt[2] = min[2];
}

//////////////////////////////////////////////////////////////////////////
//@intro	设置bounding box的下界
//@param	lowerVertexOnAxis:bounding box的下截面在对称轴上的投影
//////////////////////////////////////////////////////////////////////////
void SliceBBox::setMin(Vertex lowerVertexOnAxis){
	minPt[1] = lowerVertexOnAxis.GetY();
}

//////////////////////////////////////////////////////////////////////////
//@intro	设置bounding box的上界
//@param	max:bounding box的上界
//////////////////////////////////////////////////////////////////////////
void SliceBBox::setMax(float max[3]){
	maxPt[0] = max[0];
	maxPt[1] = max[1];
	maxPt[2] = max[2];
}


//////////////////////////////////////////////////////////////////////////
//@intro	设置bounding box的上界
//@param	higherVertexOnAxis:bounding box的上截面在对称轴上的投影
//////////////////////////////////////////////////////////////////////////
void SliceBBox::setMax(Vertex higherVertexOnAxis){
	maxPt[1] = higherVertexOnAxis.GetY();
}

//////////////////////////////////////////////////////////////////////////
//@intro	设置slice bounding box的展开方式
//@param	mode:slice bouding box的展开
//////////////////////////////////////////////////////////////////////////
void SliceBBox::setEnrollMode(EnrollMode mode){
	enrollMode = mode;
}


//////////////////////////////////////////////////////////////////////////
//@intro	获取slice bounding box的展开方式
//@return	slice bouding box的展开方式
//////////////////////////////////////////////////////////////////////////
EnrollMode SliceBBox::getEnrollMode(){
	return enrollMode;
}


//////////////////////////////////////////////////////////////////////////
//@intro	获取Bounding Box的下界
//////////////////////////////////////////////////////////////////////////
float* SliceBBox::getMinBounding(){
	return minPt;
}


//////////////////////////////////////////////////////////////////////////
//@intro	获取Bounding Box的上界
//////////////////////////////////////////////////////////////////////////
float* SliceBBox::getMaxBounding(){
	return maxPt;
}

//////////////////////////////////////////////////////////////////////////
//@intro	判断点是否在Bounding Box内
//@param	x,y,z:点的三维坐标
//////////////////////////////////////////////////////////////////////////
bool SliceBBox::isPointInBBox(double x,double y,double z){
	if( (x >= minPt[0]) && (y >= minPt[1]) && (z >= minPt[2]) && 
		(x <= maxPt[0]) && (y <= maxPt[1]) && (z <= maxPt[2]) )
		return true;
	return false;
}

//////////////////////////////////////////////////////////////////////////
//@intro	将展开模式设置为圆柱
//  [4/10/2016 zhangbo]
//////////////////////////////////////////////////////////////////////////
void SliceBBox::setCylinderMode(){
	enrollMode = Cylinder;
}

//////////////////////////////////////////////////////////////////////////
//@intro	将展开模式设置为圆台
//	[4/10/2016 zhangbo]
//////////////////////////////////////////////////////////////////////////
void SliceBBox::setTruncatedConeMode(){
	enrollMode = ConicalFrustum;
}

//////////////////////////////////////////////////////////////////////////
//@intro	判断当前Slice的展开方式是否是圆柱
//  [4/10/2016 zhangbo]
//////////////////////////////////////////////////////////////////////////
bool SliceBBox::isCylinderMode(){
	return (enrollMode == Cylinder);
}

//////////////////////////////////////////////////////////////////////////
//@intro	判断当前slice 的展开方式是否为圆台
//  [4/10/2016 zhangbo]
//////////////////////////////////////////////////////////////////////////
bool SliceBBox::isTrunConeMode(){
	return	(enrollMode == ConicalFrustum);
}